#include "ntt_nina.h"


// reduction of x * y using 64 bit arithmetic
static int32_t mul_red(int32_t x, int32_t y) {
  int64_t z;
  z = (int64_t) x * y;
  //assert(-8796042698752 <= z && z <= 8796093026303);
  x = z & 4095;
  y = z >> 12;
  return 3 * x - y;
}


/*
 * CrOOLEY-TUKEY/INPUT IN STANDARD ORDER/OUTPUT IN BIT-REVERSE ORDER
 */

/*
 * NTT computation
 * - input: a[0 ... n-1] in standard order
 * - p: constant array ow powers of omega
 *   such that p[t + j] = omega^(n/2t)^ bitrev(j) * inverse(3)
 *   for t=1, 2. 4, ..., n/2
 *   and j=0, ..., t-1.
 *
 * - output: NTT(a) in bit-reverse order
 */


/* Example usage 
static void ntt_ct_std2rev16_base(int32_t *a) {
  ntt_red_ct_std2rev(a, 16, rev_shoup_sred_ntt16_12289);
}

*/


int32_t * ntt_red_ct_std2rev(int32_t *a) {
//#pragma HLS dataflow
	uint32_t n = 1024;
	const int16_t p[1024] __attribute__ ((aligned(32))) = {
	        0, -4096, -4096,   493, -4096,   493,  5444,  2381,
	    -4096,   493,  5444,  2381, -1912, -1378,  -435, -4337,
	    -4096,   493,  5444,  2381, -1912, -1378,  -435, -4337,
	     -404,  4645,  1065,  2143, -5277, -1168, -1207, -3248,
	    -4096,   493,  5444,  2381, -1912, -1378,  -435, -4337,
	     -404,  4645,  1065,  2143, -5277, -1168, -1207, -3248,
	    -6039,  2422,  2566, -2187, -2987, -6022,  3646, -2437,
	    -4976,  1607,  -875, -3780, -5011, -1002,  5088,  4284,
	    -4096,   493,  5444,  2381, -1912, -1378,  -435, -4337,
	     -404,  4645,  1065,  2143, -5277, -1168, -1207, -3248,
	    -6039,  2422,  2566, -2187, -2987, -6022,  3646, -2437,
	    -4976,  1607,  -875, -3780, -5011, -1002,  5088,  4284,
	     4885, -1017,  1632,  5084, -1440, -3763,  3066,   -27,
	     2678,  3704,   545, -5019,   242,  1537, -4714, -4143,
	     3833,  3778,   390,  -773, -1067, -5101,  -442, -2401,
	     -354,  4861, -5698,  2912,  2859,  1045, -5012, -2481,
	    -4096,   493,  5444,  2381, -1912, -1378,  -435, -4337,
	     -404,  4645,  1065,  2143, -5277, -1168, -1207, -3248,
	    -6039,  2422,  2566, -2187, -2987, -6022,  3646, -2437,
	    -4976,  1607,  -875, -3780, -5011, -1002,  5088,  4284,
	     4885, -1017,  1632,  5084, -1440, -3763,  3066,   -27,
	     2678,  3704,   545, -5019,   242,  1537, -4714, -4143,
	     3833,  3778,   390,  -773, -1067, -5101,  -442, -2401,
	     -354,  4861, -5698,  2912,  2859,  1045, -5012, -2481,
	    -3636,  4938, -2704, -5291,  1663,  1777,  1426, -4654,
	    -4919,  -113, -3915, -2166,  -160, -3149,  4437,    -3,
	     4372,  2174,  4414,  2847,  4057,  3271, -3364,  1689,
	    -2305, -5042, -4053,  2645, -1484,  4895, -2780,  5195,
	     -476, -3531,  4905,  3985,  2178,  1544, -5559,  -420,
	     -671,  3000,  3016,  -243,  2399, -3400,  3136,  5191,
	    -3186, -5407, -2126,  1630,  1153, -2884,  4048,  2249,
	     2686,  3247, -3978,  2969,  3510,  5332, -2865,  2370,
	    -4096,   493,  5444,  2381, -1912, -1378,  -435, -4337,
	     -404,  4645,  1065,  2143, -5277, -1168, -1207, -3248,
	    -6039,  2422,  2566, -2187, -2987, -6022,  3646, -2437,
	    -4976,  1607,  -875, -3780, -5011, -1002,  5088,  4284,
	     4885, -1017,  1632,  5084, -1440, -3763,  3066,   -27,
	     2678,  3704,   545, -5019,   242,  1537, -4714, -4143,
	     3833,  3778,   390,  -773, -1067, -5101,  -442, -2401,
	     -354,  4861, -5698,  2912,  2859,  1045, -5012, -2481,
	    -3636,  4938, -2704, -5291,  1663,  1777,  1426, -4654,
	    -4919,  -113, -3915, -2166,  -160, -3149,  4437,    -3,
	     4372,  2174,  4414,  2847,  4057,  3271, -3364,  1689,
	    -2305, -5042, -4053,  2645, -1484,  4895, -2780,  5195,
	     -476, -3531,  4905,  3985,  2178,  1544, -5559,  -420,
	     -671,  3000,  3016,  -243,  2399, -3400,  3136,  5191,
	    -3186, -5407, -2126,  1630,  1153, -2884,  4048,  2249,
	     2686,  3247, -3978,  2969,  3510,  5332, -2865,  2370,
	    -5828, -5023, -4591,  5728,  3328, -5777, -1351,  4978,
	    -2639,  4821, -2625,   949, -2744, -3006,  2975,   563,
	    -1212,  1646,  3195, -5860, -3542, -3504, -3621,  2545,
	    -5736, -4134, -1305,  -722,  4043, -5146,  1479,    -1,
	     -790,  -955,  1170, -2319, -3201, -3014, -1326,  5086,
	    -1062,  2294, -4805, -3553, -3712,  3135, -2747,  4846,
	    -4255, -1177,  1635, -2768,   726,  4611, -1853,  -140,
	    -4320,  1000, -3091,   -81,  4896,  2963, -3051, -2366,
	      827, -5767,   953, -3748,  -118, -2476,  2197,  5067,
	     5374, -2837,   130, -4354, -4452,  2396,  3949,  3296,
	    -2468,  -339,   544,  5791,  -480,  2842,  1022,    -9,
	     4989,  5331,  4278, -1673,  4177, -3584,  2525, -1381,
	     2731, -3932,  5911,  4890,  3459,  3637,  -145, -5542,
	    -4231, -2548,   355, -3382, -1759,  3707,  3694, -5179,
	    -2013, -3289, -3241,  -729, -5092,  2089, -2881,  3284,
	    -5755,  4632, -4388, -1260,  2426,  -334,  1696,  1428,
	    -4096,   493,  5444,  2381, -1912, -1378,  -435, -4337,
	     -404,  4645,  1065,  2143, -5277, -1168, -1207, -3248,
	    -6039,  2422,  2566, -2187, -2987, -6022,  3646, -2437,
	    -4976,  1607,  -875, -3780, -5011, -1002,  5088,  4284,
	     4885, -1017,  1632,  5084, -1440, -3763,  3066,   -27,
	     2678,  3704,   545, -5019,   242,  1537, -4714, -4143,
	     3833,  3778,   390,  -773, -1067, -5101,  -442, -2401,
	     -354,  4861, -5698,  2912,  2859,  1045, -5012, -2481,
	    -3636,  4938, -2704, -5291,  1663,  1777,  1426, -4654,
	    -4919,  -113, -3915, -2166,  -160, -3149,  4437,    -3,
	     4372,  2174,  4414,  2847,  4057,  3271, -3364,  1689,
	    -2305, -5042, -4053,  2645, -1484,  4895, -2780,  5195,
	     -476, -3531,  4905,  3985,  2178,  1544, -5559,  -420,
	     -671,  3000,  3016,  -243,  2399, -3400,  3136,  5191,
	    -3186, -5407, -2126,  1630,  1153, -2884,  4048,  2249,
	     2686,  3247, -3978,  2969,  3510,  5332, -2865,  2370,
	    -5828, -5023, -4591,  5728,  3328, -5777, -1351,  4978,
	    -2639,  4821, -2625,   949, -2744, -3006,  2975,   563,
	    -1212,  1646,  3195, -5860, -3542, -3504, -3621,  2545,
	    -5736, -4134, -1305,  -722,  4043, -5146,  1479,    -1,
	     -790,  -955,  1170, -2319, -3201, -3014, -1326,  5086,
	    -1062,  2294, -4805, -3553, -3712,  3135, -2747,  4846,
	    -4255, -1177,  1635, -2768,   726,  4611, -1853,  -140,
	    -4320,  1000, -3091,   -81,  4896,  2963, -3051, -2366,
	      827, -5767,   953, -3748,  -118, -2476,  2197,  5067,
	     5374, -2837,   130, -4354, -4452,  2396,  3949,  3296,
	    -2468,  -339,   544,  5791,  -480,  2842,  1022,    -9,
	     4989,  5331,  4278, -1673,  4177, -3584,  2525, -1381,
	     2731, -3932,  5911,  4890,  3459,  3637,  -145, -5542,
	    -4231, -2548,   355, -3382, -1759,  3707,  3694, -5179,
	    -2013, -3289, -3241,  -729, -5092,  2089, -2881,  3284,
	    -5755,  4632, -4388, -1260,  2426,  -334,  1696,  1428,
	    -1360,  3956, -5297,  6119, -2555, -6122,  5184, -1200,
	     1594, -1962,  5106, -5961,  -168, -2692, -3329,  4298,
	     -325, -1404,   948,  1146, -3728,  4049, -5990,  1159,
	      652,  5766, -6099,  -295, -4016, -4077, -2919, -3762,
	     1958, -4322,  2078,  1112,  1058,  4079,   922,  -441,
	    -1319,  3150,   709,  4046, -4240, -3570,   835,  6065,
	     5257, -3834, -5919, -4433,  3054, -5486, -3123,  1747,
	    -5782,  1566, -2948,  2503, -2459,   683,    64, -3656,
	     2057, -5369, -3202, -4493, -1512,   350, -5383,  1815,
	     1583, -5942, -2500,  1489,  1483,  5915, -1263,   -49,
	     5868,  2738, -5735, -2655,   723,   174, -1693,  3009,
	     3315,  -426, -4754, -1858, -3757, -1975,  -347,  2925,
	      418,  3772, -5908,  -453, -1293,  4737, -4774,  5429,
	    -2767,  -156, -3991, -3969, -5876, -2281, -2031, -5333,
	    -2882,  1805, -1954, -2051,  2447, -6142,   576,  3963,
	     2908,  -218, -3529,  3434, -4115, -3030,  2361,  1843,
	     -975, -4212,  2844,  3438,  1105,  -142, -5681,  3477,
	     1956,  5009, -6008,  -885,   241,    58,  3532,  1003,
	     4782, -5886,  3029, -5594,  -504,  4213,  2302,   605,
	     4624, -6077,  3263, -3600, -3602,  6068,  -421,  4080,
	     3482,   787, -5468, -1010, -3127, -4169,  2920,  5241,
	    -5057,  4698,  3445, -4780,  4912,  2049,   192,  1321,
	    -3957, -2839,  2127,  -151,  -431,  1579,  2505,  5906,
	     3174,   -52,  2766, -1323, -6055,  3336,  -677, -5874,
	     5315, -4075, -4916,  4324,  2169,   522, -5079, -3262,
	    -2344, -1278, -1973, -5574,  1018, -5925, -1041, -3514,
	     4749, -5537,  4789,  4467,  4449,  5456, -3789,  -147,
	    -4536,  1050, -3860,  5445,  2683, -1190, -3818,  6118,
	     3643,  5415, -5862,  6136, -4948, -6137,  1728,  -400,
	    -3565,  -654,  1702, -1987,   -56,  3199, -5206,  5529,
	     3988,  -468,   316,   382, -5339,  5446, -6093, -3710,
	    -3879,  1922, -2033,  3998, -5435, -1359,  -973, -1254,
	};
	#pragma HLS ARRAY_PARTITION variable=p complete dim=1
  uint32_t j =0;
  uint32_t s = 0;
  uint32_t t =0;
  uint32_t u = 0;
  uint32_t d = 0;
  int32_t x = 0;
  int32_t w = 0;

  d = n;
  for (t=1; t<n; t <<= 1) {
    d >>= 1;
    /*
     * Invariant: d * 2t = n.
     *
     * Each iteration produces d blocks of size 2t.
     * Block i is stored at indices {i, i+d, ..., i+d*(2t-1) } in
     * bit-reverse order.
     *
     * The w_t for this round is omega^(n/2t).
     * and w_t,j is w_t^bitrev(j)
     */
    // first loop: j=0, bitrev(j) = 0
    for (int s=0; s<d; s ++) {
      x = a[s + d];
      a[s + d] = a[s] - x;
      a[s] = a[s] + x;
    }
    u = 0;
    for (int j=1; j<t; j++) {
      w = p[t + j]; // w_t^bitrev(j)
      u += 2 * d;   // u = 2 * d * j
      for (s=u; s<u+d; s++) {
        x = mul_red(a[s + d], w);
        a[s + d] = a[s] - x;
        a[s] = a[s] + x;
      }
    }
  }


  return a;
}

/*
 * Version 4
 * - input a[0 ... n-1] in standard order
 * - p: constant array such that
 *   p[t + j] = omega^(n/2t)^ bitrev(j)
 *   for t=1, 2, 4, ..., n/2
 *   and j=0, ..., t-1.
 *
 * - output: NTT(a) in bit-reverse order
 */
//extern void ntt_ct_std2rev(int32_t *a, uint32_t n, const uint16_t *p); // other one we can use



/* example suage 
static void ntt_ct_std2rev1024_base(int32_t *a) {
  ntt_red_ct_std2rev(a, 1024, rev_shoup_sred_ntt1024_12289);
*/

